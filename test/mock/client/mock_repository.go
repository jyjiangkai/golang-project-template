// Code generated by MockGen. DO NOT EDIT.
// Source: test/pkg/client/mock_client.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTestClientInterface is a mock of TestClientInterface interface.
type MockTestClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTestClientInterfaceMockRecorder
}

// MockTestClientInterfaceMockRecorder is the mock recorder for MockTestClientInterface.
type MockTestClientInterfaceMockRecorder struct {
	mock *MockTestClientInterface
}

// NewMockTestClientInterface creates a new mock instance.
func NewMockTestClientInterface(ctrl *gomock.Controller) *MockTestClientInterface {
	mock := &MockTestClientInterface{ctrl: ctrl}
	mock.recorder = &MockTestClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestClientInterface) EXPECT() *MockTestClientInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTestClientInterface) Get() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockTestClientInterfaceMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTestClientInterface)(nil).Get))
}

// Update mocks base method.
func (m *MockTestClientInterface) Update(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTestClientInterfaceMockRecorder) Update(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTestClientInterface)(nil).Update), name)
}
